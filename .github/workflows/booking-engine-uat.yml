name: Release UAT Booking Engine

on: [workflow_dispatch]

env:
  # build
  IMAGE_NAME: booking-engine
  
  GCP_REGION: asia-south1
  GCP_PROJECT: uat-bookone
  GCP_PROJECT_NUMBER: 271002230886

  GCP_IDENTITY_POOL_NAME: release
  GCP_IDENTITY_PROVIDER_NAME: github-provider
  GCP_SERVICE_ACCOUNT: build-manager@uat-bookone.iam.gserviceaccount.com
  

  # deployment
  NAMESPACE: webui
  SERVICE_NAME: booking_engine
  
  AWS_ROLE: arn:aws:iam::153432822124:role/bookone-uat-deployment-role
  AWS_REGION: ap-south-1
  AWS_SECRET: bookone_uat_deployment_credentials

  BRANCH: release-uat-booking-engine
  
  # generated do not touch
  # IDENTITY_PROVIDER: projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.GCP_IDENTITY_POOL_NAME }}/providers/${GCP_IDENTITY_PROVIDER_NAME}
  # CONTAINER_REGISTRY: ${{ env.GCP_REGION }}-docker.pkg.dev
  # IMAGE_URI: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.IMAGE_NAME }}/release
  # depl_username: aa
  # depl_password: aa
  # depl_url: aa


permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH }}
          fetch-depth: 1
  
      - name: Generate Derived Environment Variables
        id: set-env-vars
        run: |
          echo "IDENTITY_PROVIDER=projects/${GCP_PROJECT_NUMBER}/locations/global/workloadIdentityPools/${GCP_IDENTITY_POOL_NAME}/providers/${GCP_IDENTITY_PROVIDER_NAME}" >> $GITHUB_ENV
          echo "CONTAINER_REGISTRY=${GCP_REGION}-docker.pkg.dev" >> $GITHUB_ENV
          echo "IMAGE_URI=${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT}/${IMAGE_NAME}/release" >> $GITHUB_ENV
          echo "COMMIT_ID=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Verify Environment Variables
        run: |
          echo "IDENTITY_PROVIDER: $IDENTITY_PROVIDER"
          echo "CONTAINER_REGISTRY: $CONTAINER_REGISTRY"
          echo "IMAGE_URI: $IMAGE_URI"
          echo "COMMIT_ID: $COMMIT_ID"


      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}

      - name: Docker Login to Registry
        run: |
          yes | gcloud auth configure-docker asia-south1-docker.pkg.dev

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "8"

      - name: Generate Java Jar file
        id: generate-jar-file
        run: |
          mvn -U clean package -DskipTests

      - name: Build Container Image
        id: build-container-image
        run: |
          docker build -t ${{ env.IMAGE_URI }}:latest -t ${{ env.IMAGE_URI }}:${{ env.COMMIT_ID }} .

      - name: Push Container Image to Registry
        id: upload-container-image
        run: |
          docker push ${{ env.IMAGE_URI }}:latest
          docker push ${{ env.IMAGE_URI }}:${{ env.COMMIT_ID }}


  deploy:
    needs: build
    name: deploy
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch deployment credentials from aws secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{ env.AWS_SECRET }}
          parse-json-secrets: true
          name-transformation: none

      - name: Set environment variables
        run: |
          username_var="${AWS_SECRET}_username"
          password_var="${AWS_SECRET}_password"
          url_var="${AWS_SECRET}_url"

          echo "depl_username=${!username_var}" >> $GITHUB_ENV
          echo "depl_password=${!password_var}" >> $GITHUB_ENV
          echo "depl_url=${!url_var}" >> $GITHUB_ENV

      - name: deploy
        id: deploy
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/x-www-form-urlencoded" -u "$depl_username:$depl_password" -d "service_to_update=$SERVICE_NAME" "$depl_url/job/$NAMESPACE/buildWithParameters")
          if [ "$response" -eq 201 ]; then
            echo "Success! The response code is $response."
          else
            echo "Failed! The response code is $response."
            exit 1
          fi
